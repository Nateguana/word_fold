const phong_frag = "precision mediump float;\r\n\r\nuniform mat3 mLightMults;\r\nuniform float shininess;\r\nuniform float light_type;\r\nuniform float skybox_type;\r\nuniform sampler2D texture;\r\nuniform samplerCube skybox;\r\nuniform sampler2D shadow;\r\n\r\nuniform mat4 mInverseView;\r\n\r\nvarying vec3 L, N, V;\r\nvarying vec2 UV;\r\nvarying vec4 S;\r\n\r\nvec3 get_color(vec3 V, vec3 L, vec3 N, vec3 diffuse_color, vec3 specular_color, float light_type) {\r\n    float LN_dot = dot(L, N);\r\n\r\n    vec3 R = (2.0 * LN_dot * N) - L;\r\n\r\n    float ambient_light;\r\n    float other_light;\r\n    if(light_type < 0.0) {\r\n        ambient_light = -light_type;\r\n        other_light = 0.0;\r\n    } else {\r\n        ambient_light = 0.25;\r\n        other_light = light_type;\r\n    }\r\n\r\n    vec3 diffuse = diffuse_color * max(LN_dot, 0.0);\r\n    vec3 specular = specular_color * pow(max(dot(V, R), 0.0), shininess);\r\n    vec3 ambient = diffuse_color * ambient_light;\r\n\r\n    return ambient + (specular + diffuse) * other_light;\r\n}\r\n\r\nvoid main() {\r\n    vec2 uv = UV;\r\n    float texture_mix = uv.x < 0.0 ? 0.0 : 0.8;\r\n    uv.y = 1.0 - uv.y;\r\n\r\n    vec3 diffuse_color = (1.0 - texture_mix) * mLightMults[0] +\r\n        texture_mix * texture2D(texture, uv).xyz;\r\n\r\n    float light_type_num = light_type;\r\n\r\n    vec3 shadow_uv = S.xyz / S.w;\r\n    float pixel_depth = shadow_uv.z - .01;\r\n    float shadow_depth = texture2D(shadow, shadow_uv.xy).x;\r\n\r\n    // if(shadow_uv.z < 0.0) {\r\n    //     gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);\r\n    //     return;\r\n    // }\r\n\r\n    // bool x = clamp(shadow_uv.x, 0.0, 1.0) != shadow_uv.x;\r\n    // bool y = clamp(shadow_uv.y, 0.0, 1.0) != shadow_uv.y;\r\n    // bool is_in_range = shadow_uv.x >= 0.0 &&\r\n    //     shadow_uv.x >= 1.0 &&\r\n    //     shadow_uv.y >= 0.0 &&\r\n    //     shadow_uv.y >= 1.0;\r\n    // if(x || y) {\r\n    //     gl_FragColor = vec4(x ? 1.0 : 0.0, 0.0, y ? 1.0 : 0.0, 1.0);\r\n    //     return;\r\n    // }\r\n\r\n    if(pixel_depth >= shadow_depth) {\r\n        light_type_num = 0.0;\r\n        // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        // return;\r\n    }\r\n\r\n    vec3 N_V = normalize(V);\r\n    vec3 N_L = normalize(L);\r\n    vec3 N_N = normalize(N);\r\n\r\n    float skybox_mix = 0.0;\r\n    vec3 skybox_uv = reflect(-N_V, N_N);\r\n\r\n    if(skybox_type != 0.0) {\r\n        skybox_mix = 0.25;\r\n    }\r\n    if(skybox_type < 0.0) {\r\n        skybox_uv = refract(-N_V, N_N, 1.5);\r\n    }\r\n\r\n    vec3 skybox_dir = mat3(mInverseView) * skybox_uv;\r\n    vec3 rcolor = textureCube(skybox, skybox_dir).xyz;\r\n\r\n    vec3 fcolor = get_color(N_V, N_L, N_N, diffuse_color, mLightMults[2], light_type_num);\r\n\r\n    vec3 color = (1.0 - skybox_mix) * fcolor + skybox_mix * rcolor;\r\n    gl_FragColor = vec4(color, 1.0);\r\n}\r\n";

export { phong_frag as default };
